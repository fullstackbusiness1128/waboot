<?php
if (!function_exists('waboot_locate_template_uri')):
    /**
     * Snatched from future release code in WordPress repo.
     *
     * Retrieve the URI of the highest priority template file that exists.
     *
     * Searches in the stylesheet directory before the template directory so themes
     * which inherit from a parent theme can just override one file.
     *
     * @param string|array $template_names Template file(s) to search for, in order.
     * @return string The URI of the file if one is located.
     */
    function waboot_locate_template_uri($template_names)
    {

        $located = '';
        foreach ((array)$template_names as $template_name) {
            if (!$template_name)
                continue;

            if (file_exists(get_stylesheet_directory() . '/' . $template_name)) {
                $located = get_stylesheet_directory_uri() . '/' . $template_name;
                break;
            } else if (file_exists(get_template_directory() . '/' . $template_name)) {
                $located = get_template_directory_uri() . '/' . $template_name;
                break;
            }
        }

        return $located;
    }
endif;

/**
 * Replace the $old_prefix with $new_prefix in Theme Options id
 * @param $old_prefix
 * @param $new_prefix
 * @since 0.1.0
 */
function prefix_theme_options($old_prefix, $new_prefix)
{
    $options_field = get_option('optionsframework');

    if (!$options_field || empty($options_field)) return;

    $options = get_option($options_field['id']);
    $new_options = array();

    if (!empty($options) && $options != false) {
        foreach ($options as $k => $v) {
            $new_k = preg_replace("|^" . $old_prefix . "_|", $new_prefix . "_", $k);
            $new_options[$new_k] = $v;
        }
    } else {
        return;
    }

    update_option($options_field['id'], $new_options);
}

/**
 * Transfer theme options from a theme to another
 * @param string $from_theme theme the name of the theme from which export
 * @param (optional) null string $to_theme the name of the theme into which import (current theme if null)
 * @totest
 * @since 0.1.0
 */
function transfer_theme_options($from_theme, $to_theme = null)
{
    $from_theme_options = get_option($from_theme);
    if (!isset($to_theme))
        import_theme_options($from_theme_options);
    else
        update_option($to_theme, $from_theme_options);
}

/**
 * Copy a theme options array into current theme options option. Old theme options will be replaced.
 * @param array $exported_options
 * @totest
 * @since 0.1.0
 */
function import_theme_options($exported_options)
{
    $options_field = get_option('optionsframework');
    update_option($options_field['id'], $exported_options);
}

if (!function_exists("waboot_of_custom_css")): /**
 * Checks if there is an autogenerated custom client css file
 * @return bool
 */ {
    function waboot_of_custom_css()
    {
        $filepath = get_stylesheet_directory() . "/assets/css/client-custom.css"; //todo: make file name customizable
        if (is_file($filepath)) {
            $fileuri = get_stylesheet_directory_uri() . "/assets/css/client-custom.css";

            return $fileuri;
        }

        return false;
    }
}
endif;

if (!function_exists("waboot_admin_show_message")) :
    function waboot_admin_show_message($m, $type)
    {
        ?>
        <div class="<?php echo $type; ?>">
            <p><?php echo $m; ?></p>
        </div>
    <?php
    }
endif;

/***************************************************************
 * MOBILE DETECT FUNCTIONS
 ***************************************************************/

if (!function_exists("wb_is_mobile")):
    function wb_is_mobile()
    {
        $md = WBF::get_mobile_detect();
        return ($md->isMobile());
    }
endif;

if (!function_exists("wb_is_tablet")):
    function wb_is_tablet()
    {
        $md = WBF::get_mobile_detect();
        return ($md->isTablet());
    }
endif;

if (!function_exists("wb_is_ios")):
    function wb_is_ios()
    {
        $md = WBF::get_mobile_detect();
        return ($md->isiOS());
    }
endif;

if (!function_exists("wb_is_android")):
    function wb_is_android()
    {
        $md = WBF::get_mobile_detect();
        return ($md->isAndroidOS());
    }
endif;

if (!function_exists("wb_is_windows_mobile")):
    function wb_is_windows_mobile()
    {
        $md = WBF::get_mobile_detect();
        return ($md->is('WindowsMobileOS') || $md->is('WindowsPhoneOS'));
    }
endif;

if (!function_exists("wb_is_iphone")):
    function wb_is_iphone()
    {
        $md = WBF::get_mobile_detect();
        return ($md->isIphone());
    }
endif;

if (!function_exists("wb_is_ipad")):
    function is_ipad()
    {
        $md = WBF::get_mobile_detect();
        return ($md->isIpad());
    }
endif;

if (!function_exists("wb_is_samsung")):
    function wb_is_samsung()
    {
        $md = WBF::get_mobile_detect();
        return ($md->is('Samsung'));
    }
endif;

if (!function_exists("wb_is_samsung_tablet")):
    function wb_is_samsung_tablet()
    {
        $md = WBF::get_mobile_detect();
        return ($md->is('SamsungTablet'));
    }
endif;

if (!function_exists("wb_is_kindle")):
    function wb_is_kindle()
    {
        $md = WBF::get_mobile_detect();
        return ($md->is('Kindle'));
    }
endif;

if (!function_exists("wb_android_version")):
    function wb_android_version()
    {
        $md = WBF::get_mobile_detect();
        return $md->version('Android');
    }
endif;

if (!function_exists("wb_iphone_version")):
    function wb_iphone_version()
    {
        $md = WBF::get_mobile_detect();
        return $md->version('iPhone');
    }
endif;

if (!function_exists("wb_ipad_version")):
    function wb_ipad_version()
    {
        $md = WBF::get_mobile_detect();
        return $md->version('iPad');
    }
endif;



/** Typography */

/**
 * Returns an array of system fonts
 * Feel free to edit this, update the font fallbacks, etc.
 */

function options_typography_get_os_fonts() {
    // OS Font Defaults
    $os_faces = array(
        'Arial, sans-serif' => 'Arial',
        '"Avant Garde", sans-serif' => 'Avant Garde',
        'Cambria, Georgia, serif' => 'Cambria',
        'Copse, sans-serif' => 'Copse',
        'Garamond, "Hoefler Text", Times New Roman, Times, serif' => 'Garamond',
        'Georgia, serif' => 'Georgia',
        '"Helvetica Neue", Helvetica, sans-serif' => 'Helvetica Neue',
        'Tahoma, Geneva, sans-serif' => 'Tahoma'
    );
    return $os_faces;
}


/**
 * Returns a select list of Google fonts
 * Feel free to edit this, update the fallbacks, etc.
 */

function options_typography_get_google_fonts() {
    // Google Font Defaults
    $google_faces = array(
        'Arvo, serif' => 'Arvo',
        'Copse, sans-serif' => 'Copse',
        'Droid Sans, sans-serif' => 'Droid Sans',
        'Droid Serif, serif' => 'Droid Serif',
        'Lobster, cursive' => 'Lobster',
        'Nobile, sans-serif' => 'Nobile',
        'Open Sans, sans-serif' => 'Open Sans',
        'Oswald, sans-serif' => 'Oswald',
        'Pacifico, cursive' => 'Pacifico',
        'Rokkitt, serif' => 'Rokkit',
        'PT Sans, sans-serif' => 'PT Sans',
        'Quattrocento, serif' => 'Quattrocento',
        'Raleway, cursive' => 'Raleway',
        'Ubuntu, sans-serif' => 'Ubuntu',
        'Yanone Kaffeesatz, sans-serif' => 'Yanone Kaffeesatz'
    );
    return $google_faces;
}